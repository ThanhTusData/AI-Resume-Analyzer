version: '3.8'

services:
  # Streamlit Frontend
  streamlit:
    build:
      context: .
      dockerfile: docker/Dockerfile.streamlit
    container_name: resume_analyzer_frontend
    ports:
      - "8501:8501"
    environment:
      - PYTHONUNBUFFERED=1
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - ./src:/app/src
      - ./data:/app/data
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
    networks:
      - resume_network
    restart: unless-stopped
    command: streamlit run app/main.py

  # FastAPI Backend (Optional)
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: resume_analyzer_api
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - API_HOST=0.0.0.0
      - API_PORT=8000
    env_file:
      - .env
    volumes:
      - ./api:/app/api
      - ./src:/app/src
      - ./data:/app/data
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
    networks:
      - resume_network
    restart: unless-stopped
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: resume_analyzer_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-resume_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - resume_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: resume_analyzer_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - resume_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Selenium Hub for Scraping
  selenium-hub:
    image: selenium/hub:4.15.0
    container_name: selenium_hub
    ports:
      - "4444:4444"
      - "4442:4442"
      - "4443:4443"
    environment:
      - GRID_MAX_SESSION=5
      - GRID_BROWSER_TIMEOUT=300
      - GRID_TIMEOUT=300
    networks:
      - resume_network
    restart: unless-stopped

  # Chrome Node for Selenium
  chrome:
    image: selenium/node-chrome:4.15.0
    container_name: selenium_chrome
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=5
      - SE_NODE_SESSION_TIMEOUT=300
    volumes:
      - /dev/shm:/dev/shm
    networks:
      - resume_network
    restart: unless-stopped

  # Celery Worker (Optional - for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: celery_worker
    command: celery -A api.celery_app worker --loglevel=info
    env_file:
      - .env
    volumes:
      - ./api:/app/api
      - ./src:/app/src
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - resume_network
    restart: unless-stopped

  # Flower - Celery Monitoring (Optional)
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: celery_flower
    command: celery -A api.celery_app flower --port=5555
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      - redis
      - celery-worker
    networks:
      - resume_network
    restart: unless-stopped

  # Prometheus for Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - resume_network
    restart: unless-stopped

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana_dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json
    depends_on:
      - prometheus
    networks:
      - resume_network
    restart: unless-stopped

  # PgAdmin for Database Management (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - resume_network
    restart: unless-stopped

networks:
  resume_network:
    driver: bridge
    name: resume_analyzer_network

volumes:
  postgres_data:
    name: resume_analyzer_postgres
  redis_data:
    name: resume_analyzer_redis
  prometheus_data:
    name: resume_analyzer_prometheus
  grafana_data:
    name: resume_analyzer_grafana
  pgadmin_data:
    name: resume_analyzer_pgadmin